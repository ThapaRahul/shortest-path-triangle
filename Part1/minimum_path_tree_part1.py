# -*- coding: utf-8 -*-
"""minimum-path-tree-part1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fZJC5JiI8Rk69BLYWSKeljKY0xO0UjD3
"""

n = 5  # select the size of the base

def minimim_path_triangle(n):

  def make_triangle(n):
    triangle = []

    import random

    for i in range(n):
      temp_list = []
      for j in range(0, i+1):
        temp_list.append((random.randint(1, n**2), j))
      triangle.append(temp_list)

    return triangle

  def find_all_paths(triangle):
    sum_triangle = [[triangle[0][0]]]
    n = len(triangle)
    for i in range(1, n):
      temp_triangle = []
      for item in sum_triangle:
        copy_item = item.copy()
        n = len(copy_item)
        idx = copy_item[n-1][1]
        copy_item.append(triangle[i][idx])
        item.append(triangle[i][idx+1])
        temp_triangle.append(copy_item)
        temp_triangle.append(item)
      
      sum_triangle = temp_triangle
    
    return sum_triangle

  def find_sum(x):
    summ = 0
    for i in range(len(x)):
      summ += x[i][0]
    return summ


  def find_min_path(sum_triangle):
    min_sum = find_sum(sum_triangle[0])
    min_idx = 0
    for i in range(0, len(sum_triangle)):
      temp_sum = find_sum(sum_triangle[i])
      if (temp_sum < min_sum):
        min_sum = temp_sum
        min_idx = i
    
    return [x[0] for x in sum_triangle[min_idx]]

  triangle = make_triangle(n)
  sum_triangle = find_all_paths(triangle)
  return find_min_path(sum_triangle), triangle, sum_triangle

min_path, triangle, sum_triangle = minimim_path_triangle(n)

print(triangle)
print(min_path)

threshold = 60  # what is the largest time for one operation you want to run

def plot_efficiency(threshold):
  import time

  n = []
  t = []

  n_temp = 1
  while(True):
    start_time = time.time()
    min_path, _, _ = minimim_path_triangle(n_temp)
    t_temp = time.time() - start_time

    if t_temp>threshold:
      break

    n.append(n_temp)
    t.append(t_temp)

    n_temp += 1

  return n, t

n, t = plot_efficiency(threshold)

import matplotlib.pyplot as plt
plt.plot(n, t, 'o')
plt.title("Brute Force Algorithm Running Time")
plt.xlabel("size of the base (n)")
plt.ylabel("run-time (t)")
plt.savefig("bruteforce.png")